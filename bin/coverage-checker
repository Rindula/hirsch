#!/usr/bin/env php
<?php
// coverage-checker.php
$inputFile  = $argv[1];
$percentage = min(100, max(0, (int) $argv[2]));

if (!file_exists($inputFile)) {
    echo "Please run bin/coverage command first" . PHP_EOL;
    exit(1);
}

if (!$percentage) {
    throw new InvalidArgumentException('An integer checked percentage must be given as second parameter');
}

$fileContent = file_get_contents($inputFile);
if(!$fileContent)throw new \Symfony\Component\Filesystem\Exception\IOException("Can't read file");

try {
    $xml = new SimpleXMLElement($fileContent);
    $metrics         = $xml->xpath('//metrics');
    $totalElements   = 0;
    $checkedElements = 0;


    foreach ($metrics as $metric) {
        $totalElements   += (int) $metric['elements'];
        $checkedElements += (int) $metric['coveredelements'];
    }

    $coverage = round(($checkedElements / $totalElements) * 100,2);
    if (isset($_ENV['CI'])) echo "::set-output name=coverage::".$coverage.PHP_EOL;
    if ($coverage < $percentage) {
        if (isset($_ENV['CI'])) echo "::error::";
        echo 'Code coverage is ' . $coverage . '%, which is below the accepted ' . $percentage . '%' . PHP_EOL;
        exit(1);
    }
    if (isset($_ENV['CI'])) echo "::notice::";
    echo 'Code coverage is ' . $coverage . '% - OK!' . PHP_EOL;
} catch (Exception $e) {
    echo 'Error while parsing XML file';
    echo $e->getMessage();
    echo $e->getTraceAsString();
    exit(1);
}
