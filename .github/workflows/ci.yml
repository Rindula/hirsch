name: CI/CD
on:
  release:
    types: [published]
jobs:
  test:
    name: Unittest
    runs-on: ubuntu-latest
    strategy:
      matrix:
        php: [8]
        experimental: [false]
        include:
          - php: 7.4
            experimental: true
    services:
      mariadb:
        image: mariadb:latest
        ports:
          - 3306
        env:
          MYSQL_USER: hirsch
          MYSQL_PASSWORD: testing
          MYSQL_DATABASE: hirsch_test
          MYSQL_ROOT_PASSWORD: root
        options: --health-cmd="mysqladmin ping" --health-interval=5s --health-timeout=2s --health-retries=3
    steps:
      - uses: actions/checkout@v2.3.5

      - uses: shivammathur/setup-php@2.15.0
        with:
          php-version: ${{ matrix.php }}
          tools: composer:v2
          extensions: intl, mbstring, imap, zip, dom, pdo_mysql

      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Install dependencies
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Replace variables
        env:
          DB_PORT: ${{ job.services.mariadb.ports[3306] }}
        run: |
          sed -i "s/non_standard_port_number_replace/${DB_PORT}/" config/app_local.php
          current_timestamp=`git log -n1 --pretty=%ci HEAD`; sed -i "s/last\_update\_timestamp/${current_timestamp}/" config/app_local.php


      # Add a test script to composer.json, for instance: "test": "vendor/bin/phpunit"
      # Docs: https://getcomposer.org/doc/articles/scripts.md

      - name: Run Unittests
        continue-on-error: ${{ matrix.experimental }}
        run: composer run-script test
  build_hetzner:
    name: Build (Hetzner)
    runs-on: ubuntu-latest
    environment:
      name: hetzner
    concurrency:
      group: build-${{github.ref}}
      cancel-in-progress: true
    steps:
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - uses: actions/checkout@v2.3.5
        with:
          submodules: 'recursive'
          ssh-key: '${{ secrets.SSHKEY }}'
      - name: Set Timezone
        uses: szenius/set-timezone@v1.0
        with:
          timezoneLinux: "Europe/Berlin"
      - uses: shivammathur/setup-php@2.15.0
        with:
          php-version: 8
          tools: composer:v2
          extensions: intl, mbstring, imap, zip, dom, pdo_mysql
      - name: Install Composer dependencies
        env:
          SALT: ${{ secrets.SALT }}
        run: composer install --prefer-dist --no-interaction
      - uses: actions/setup-node@v2.4.1
        with:
          node-version: '15'
      - name: Vue - Bezahlen - Abhängigkeiten installieren
        uses: nick-invision/retry@v2.5.1
        with:
          timeout_minutes: 10
          max_attempts: 3
          warning_on_retry: false
          command: cd $GITHUB_WORKSPACE/webroot/vue-apps/bezahlen && npm ci
      - working-directory: webroot/vue-apps/bezahlen
        name: Vue - Bezahlen - Bauen
        run: |
          npm run build
      - name: Config anpassen
        run: |
          sed -i 's/db\_user/hirsch/' config/app_local.php
          sed -i 's/db\_pass/${{ secrets.DBPASS }}/' config/app_local.php
          sed -i 's/db\_name/hirsch/' config/app_local.php
          current_timestamp=`git log -n1 --pretty=%ci HEAD`; sed -i "s/last\_update\_timestamp/${current_timestamp}/" config/app_local.php
          sed -i 's/foodwars/${{ secrets.EMAILPASS }}/' config/app_local.php
          sed -i 's/essen@rindula\.de/essen@hochwarth-e.com/' config/app_local.php
          sed -i 's/{rindula\.de\/imap\/novalidate-cert}INBOX/{sslin.df.eu\/imap\/ssl}INBOX/' config/app_local.php
          sed -i "s/hirschcache/${{ steps.get_version.outputs.VERSION }}/" webroot/sw.js
          sed -i "s/user_auth_string/$(echo -n ${{ secrets.HT_USER }}:${{ secrets.HT_PASS }} | base64)/" webroot/sw.js
      - name: Passwortschutz erstellen
        run: |
          echo '' >> webroot/.htaccess
          echo 'AuthType Basic' >> webroot/.htaccess
          echo 'AuthName "Bestellungen"' >> webroot/.htaccess
          echo 'AuthUserFile /usr/www/users/hochwa/hirsch/.htpasswd' >> webroot/.htaccess
          echo 'Require valid-user' >> webroot/.htaccess
          echo 'FcgidWrapper "/home/httpd/cgi-bin/php80-fcgi-starter.fcgi" .php' >> webroot/.htaccess
          echo '<Files "manifest.json">' >> webroot/.htaccess
          echo '    Satisfy Any' >> webroot/.htaccess
          echo '    Allow from all' >> webroot/.htaccess
          echo '</Files>' >> webroot/.htaccess
          htpasswd -cb .htpasswd "${{ secrets.HT_USER }}" "${{ secrets.HT_PASS }}"
      - name: Pack Files
        run: tar -cf artifact.tar .
      - uses: actions/upload-artifact@master
        with:
          name: deploy_hetzner
          path: artifact.tar
          retention-days: 1
  deploy_hetzner:
    name: Deploy (Hetzner)
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-${{github.ref}}
      cancel-in-progress: false
    needs:
      - build_hetzner
      - test
    environment:
      name: hetzner
      url: https://hirsch.hochwarth-e.com/
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: deploy_hetzner
      - name: Unpack Files
        run: tar -xf artifact.tar
      - name: 🚮 Remove Artifact before upload
        run: rm artifact.tar
      - run: sudo apt-get install -y sshpass rsync
        name: 📦 Installing upload dependencies
      - run: sshpass -p '${{ secrets.PASSWORD }}' rsync --exclude ".git" --exclude ".github" -e "ssh -o StrictHostKeyChecking=no -p 222" -rltzvOP --del --force ./ ${{ secrets.USERNAME }}@${{ secrets.HOST }}:/usr/home/${{ secrets.USERNAME }}/public_html/hirsch
        id: upload
        name: 👨‍💻 Uploading files
      - run: sshpass -p '${{ secrets.PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@${{ secrets.HOST }} -p 222 -f "cd /usr/home/${{ secrets.USERNAME }}/public_html/hirsch && bin/cake migrations migrate && bin/cake cache clear_all"
        id: preperations
        name: 👨‍💻 Preparing system

  cleanup_artifacts:
    runs-on: ubuntu-latest
    if: always()
    needs:
      - deploy_hetzner
    steps:
      - uses: geekyeggo/delete-artifact@v1
        name: ❌ Remove Artifacts
        with:
          name: deploy_hetzner
