name: CI/CD
on:
  release:
    types: [published]
jobs:
  test:
    name: Unittest
    uses: ./.github/workflows/php.yaml
  build_hetzner:
    name: Build (Hetzner)
    runs-on: ubuntu-latest
    environment:
      name: hetzner
    concurrency:
      group: build-${{github.ref}}
      cancel-in-progress: true
    steps:
      - name: Get the version
        id: get_version
        run: |
          echo VERSION=${GITHUB_REF/refs\/tags\//} >> $GITHUB_OUTPUT
          echo '# Build status' >> $GITHUB_STEP_SUMMARY
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          ssh-key: '${{ secrets.SSHKEY }}'
          lfs: true
      - name: Set Timezone
        uses: szenius/set-timezone@v1.2
        with:
          timezoneLinux: "Europe/Berlin"
      - uses: shivammathur/setup-php@2.25.5
        with:
          php-version: 8.2
          tools: composer:v2
          extensions: intl, mbstring, imap, zip, dom, pdo_mysql
      - uses: actions/setup-node@v3.7.0
        with:
          node-version: '18'
      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-
      - name: Cache yarn packages
        id: yarn-cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Make Install
        env:
          DBPASS: ${{ secrets.DBPASS }}
          SALT: ${{ secrets.SALT }}
          EMAILPASS: ${{ secrets.EMAILPASS }}
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        run: make all
      - run: make artifact.tar
      - uses: actions/upload-artifact@v3
        with:
          name: deploy_hetzner
          path: artifact.tar
          if-no-files-found: warn
          retention-days: 1
      - run: |
          echo 'Successfully built the Project; ready for deployment! :rocket:' >> $GITHUB_STEP_SUMMARY
      - run: |
          echo 'Error building the Project! :boom:' >> $GITHUB_STEP_SUMMARY
        if: failure()
  deploy_hetzner:
    name: Deploy (Hetzner)
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-${{github.ref}}
      cancel-in-progress: false
    needs:
      - build_hetzner
      - test
    environment:
      name: hetzner
      url: https://hirsch.hochwarth-e.com/
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: deploy_hetzner
      - name: Unpack Files
        run: tar -xf artifact.tar
      - name: 🚮 Remove Artifact before upload
        run: rm artifact.tar
      - run: sudo apt-get install -y sshpass rsync
        name: 📦 Installing upload dependencies
      - run: sshpass -p '${{ secrets.PASSWORD }}' rsync --exclude ".git" --exclude ".gitmodules" --exclude ".gitattributes" --exclude ".ddev" --exclude "docker*" --exclude "infection.json.dist" --exclude "config/secrets/prod/prod.decrypt.private.php" --exclude ".editorconfig" -e "ssh -o StrictHostKeyChecking=no -p 222" -avh --delete --force ./ ${{ secrets.USERNAME }}@${{ secrets.HOST }}:/usr/home/${{ secrets.USERNAME }}/public_html/hirsch
        id: upload
        name: 👨‍💻 Uploading files
      - run: sshpass -p '${{ secrets.PASSWORD }}' ssh -o StrictHostKeyChecking=no ${{ secrets.USERNAME }}@${{ secrets.HOST }} -p 222 -f "cd /usr/home/${{ secrets.USERNAME }}/public_html/hirsch && /usr/bin/php82 bin/console --no-interaction doctrine:migrations:migrate && /usr/bin/php82 bin/console --no-interaction cache:clear && /usr/bin/php82 bin/console --no-interaction cache:warmup && APP_RUNTIME_ENV=prod /usr/bin/php82 bin/console secrets:decrypt-to-local --force"
        id: preperations
        name: 👨‍💻 Preparing system
      - run: echo "Deployment finished at $(date +'%d.%m.%Y %H:%M:%S %Z')" >> $GITHUB_STEP_SUMMARY


  cleanup_artifacts:
    name: Delete artifact
    runs-on: ubuntu-latest
    if: always()
    needs:
      - deploy_hetzner
    steps:
      - uses: geekyeggo/delete-artifact@v2
        name: ❌ Remove Artifacts
        with:
          name: deploy_hetzner

  remove_on_failed:
    name: Remove Release on fails
    runs-on: ubuntu-latest
    needs:
      - test
      - build_hetzner
    if: ${{ failure() }}
    steps:
      - name: Set output
        id: vars
        run: echo tag=${GITHUB_REF#refs/*/} >> $GITHUB_OUTPUT
      - uses: dev-drprasad/delete-tag-and-release@v1.0.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          delete_release: true # default: false
          tag_name: ${{ steps.vars.outputs.tag }} # tag name to delete
